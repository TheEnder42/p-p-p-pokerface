cmdhistory=["(straight? [\\"2H\\" \\"3S\\" \\"6C\\" \\"5D\\" \\"4D\\"])" "my-straight" "(straight? my-straight)" "(sort (set (map rank my-straight)))" "(my-vals)" "my-vals" "(nth my-vals 0)" "(+ (nth my-vals 0) 5)" "(range 2 7)" "(\= (range 2 7) my-vals)" "(sort (set (map rank my-straight)))" "(sort (set (map rank my-ace)))" "(straight? my-ace)" "(straight? my-bad-ace)" "(nth my-vals 4)" "(\=\= (nth my-vals 4) 14)" "(\=\= (nth my-ace-vals 4) 14)" "my-straight" "(sort (set (map rank my-straight)))" "(nth (\=\= (nth sorted-hand 4) 14) 4)" "(nth (\=\= (nth my-straight 4) 14) 4)" "(nth (sort (set (map rank my-straight))) 4)" "(straight? my-straight)" "(straight? my-low-ace-straight-hand)" "(straight? my-bad-ace)" "(nth (sort (set (map rank my-bad-ace))) 4)" "(set (map rank my-bad-ace))" "(vector (map rank my-bad-ace))" "(straight? my-bad-ace)" "(sort (vector (map rank hand)))" "(straight? my-straight)" "(straight? my-ace)" "(straight? my-bad-ace)" "(straight? my-low-ace-straight-hand)" "(two-pairs? no-pair)" "(two-pairs? one-pair)" "(two-pairs? two-pair)" "(frequencies (map rank one-pair))" "(vals (frequencies (map rank one-pair)))" "(frequencies (vals (frequencies (map rank one-pair))))" "(frequencies (set (vals (frequencies (map rank one-pair)))))" "(set (vals (frequencies (map rank one-pair))))" "(vals (frequencies (vals (frequencies (map rank one-pair)))))" "(vals (frequencies (vals (frequencies (map rank two-pair)))))" "(frequencies (vals (frequencies (map rank one-pair))))" "(let [rank-counts (frequencies (vals (frequencies (map rank one-pair))))]\\n  (contains? rank-counts 2))" "(frequencies (vals (frequencies (map rank one-pair))))" "(frequencies (vals (frequencies (map rank two-pair))))" "(let [rank-counts (frequencies (vals (frequencies (map rank one-pair))))]\\n  (and (contains? rank-counts 2) (\= (get rank-counts 2) 2)))" "(let [rank-counts (frequencies (vals (frequencies (map rank two-pair))))]\\n  (and (contains? rank-counts 2) (\= (get rank-counts 2) 2)))" "(frequencies (vals (frequencies (map rank three-of-a-kind))))" "(get (frequencies (vals (frequencies (map rank three-of-a-kind)))) 4)" "(get (frequencies (vals (frequencies (map rank three-of-a-kind)))) 2)" "(get (frequencies (vals (frequencies (map rank three-of-a-kind)))) 3)" "(filter (set->predicate \#{1 2 3}))" "(tally-item fruit-prices [\:persimmon 2])" "(map (fn [line-item] (tally-item fruit-prices line-item))\\r\\n     yummy-fruit)" "(reduce + (map (fn [line-item] (tally-item fruit-prices line-item))\\r\\n     yummy-fruit))" "(invoice-total {\:apple 1.5, \:pear 2.3} [[\:apple 2] [\:pear 1]])" "(apend (first [1 2]) (rest [1 2]))" "(conj (first [1 2]) (rest [1 2]))" "(swapsies [\:xyzzy \:plugh])" "(swapsies [17 42])" "lein test" "(swapsies [17 42])" "(swapsies [\:xyzzy \:plugh])" "(swapsies [17 42])" "(rest [17 42])" "(first [17 42])" "(first (rest [17 42]))" "(mulv3 [2 3 4] 2.5)" "(check-x \:_)" "(last-element-of '(\:a \:b \:c))" "(last-element-of '(\:a \:b \:c \:d))" "(reverse-list '(\:a \:b \:c \:d))" "(append-to-list \:d '(\:a \:b \:c))" "(my-merge list1 list2)" "(blank? \\"    \\")" "(filter (pred-and pos? odd?) [1 2 -4 0 6 7 -3])" "(check-x \:x)" "(check-x \:o)" "(get-col [[\:x \:o \:_] [\:o \:x \:o] [\:x \:_ \:x]] 0)" "(last-element-of '(\:a \:b \:c))" "(in-ns 'cs340-lab13.core)" "(last-element-of '(\:a \:b \:c))" "(mapv '(\:a \:b \:c) '(1 2 3))" "(mapv inc '(1 2 3))" "(reverse-list '(\:a \:b \:c \:d))" "(append-to-list '(\:a \:b \:c) \:d)" "(append-to-list '() \:d)" "(append-to-list '(\:a) \:d)" "(append-to-list '(\:a \:b \:c) \:d)" "(reverse-list '(\:a \:b \:c \:d))" "(reverse-list (make-int-list 100))" "(reverse-list (make-int-list 1000))" "(reverse-list (make-int-list 1000000))" "(reverse-list (make-int-list 100000))" "(reverse-list (make-int-list 10000))" "(reverse-list (make-int-list 1000))" "(reverse-list (make-int-list 9999))" "(reverse-list (make-int-list 5000))" "(reverse-list (make-int-list 7500))" "(reverse-list (make-int-list 9000))" "(reverse-list (make-int-list 8000))" "(reverse-list (make-int-list 8500))" "(reverse-list (make-int-list 8250))" "(reverse-list (make-int-list 8300))" "(reverse-list (make-int-list 8400))" "(reverse-list (make-int-list 8350))" "(reverse-list (make-int-list 8325))" "(reverse-list (make-int-list 8330))" "(reverse-list (make-int-list 8328))" "(reverse-list (make-int-list 8327))" "(reverse-list (make-int-list 8326))" "(+ 17 43)" "(17 + 43)" "(contains? [] 4)" "(has-award? cities \:hugo)" "(has-award? wild-seed \:hugo)" "(contains? \#{2 3 4} 4)"]
eclipse.preferences.version=1
